// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  EXPERT
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
}

enum FeedbackKind {
  GOOD
  CHEER
}

model User {
  id            String         @id @default(uuid())
  foreignId     String         @unique
  name          String
  birthday      DateTime
  gender        Gender         @default(UNKNOWN)
  role          Role           @default(MEMBER)
  posts         Post[]
  comments      Comment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subPost       SubPost[]
  feedback      Feedback[]
  notifications Notification[]
}

model Post {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  title      String
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId Int
  answers    Answer[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  comments   Comment[]
  subPosts   SubPost[]
  feedback   Feedback[]
  treatment  Boolean    @default(false)

  @@index([userId])
  @@index([categoryId])
  @@index([createdAt, id])
}

model SubPost {
  id         String      @id @default(uuid())
  post       Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  title      String
  subAnswers SubAnswer[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([postId])
  @@index([userId])
  @@index([createdAt, id])
}

model Comment {
  id            String         @id @default(uuid())
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  content       String
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([postId])
  @@index([userId])
  @@index([createdAt, id])
}

model Category {
  id    Int    @id @default(autoincrement())
  order Int
  name  String
  image String
  posts Post[]

  @@unique([name])
  @@index([order])
}

model Question {
  id          Int      @id @default(autoincrement())
  order       Int
  content     String
  viewContent String
  description String
  answers     Answer[]
  minimum     Int

  @@index([order])
}

model Answer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Restrict)
  questionId Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([questionId, postId])
  @@index([postId])
}

model SubQuestion {
  id          Int         @id @default(autoincrement())
  order       Int
  content     String
  viewContent String
  description String
  subAnswers  SubAnswer[]
  minimum     Int

  @@index([order])
}

model SubAnswer {
  id            String      @id @default(uuid())
  subQuestion   SubQuestion @relation(fields: [subQuestionId], references: [id], onDelete: Restrict)
  subQuestionId Int
  subPost       SubPost     @relation(fields: [subPostId], references: [id], onDelete: Cascade)
  subPostId     String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([subQuestionId, subPostId])
  @@index([subPostId])
}

model Feedback {
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  post      Post         @relation(fields: [postId], references: [id])
  postId    String
  kind      FeedbackKind
  createdAt DateTime     @default(now())

  @@unique([userId, postId, kind])
}

model Notification {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  read      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt, id])
}
