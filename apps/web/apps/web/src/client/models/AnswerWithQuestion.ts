/* tslint:disable */
/* eslint-disable */
/**
 * Patient Voice API
 * Patient Voice service API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SimpleQuestion } from './SimpleQuestion';
import {
    SimpleQuestionFromJSON,
    SimpleQuestionFromJSONTyped,
    SimpleQuestionToJSON,
    SimpleQuestionToJSONTyped,
} from './SimpleQuestion';

/**
 * 
 * @export
 * @interface AnswerWithQuestion
 */
export interface AnswerWithQuestion {
    /**
     * The question related to this answer
     * @type {SimpleQuestion}
     * @memberof AnswerWithQuestion
     */
    question: SimpleQuestion;
    /**
     * The content of the answer
     * @type {string}
     * @memberof AnswerWithQuestion
     */
    content: string;
}

/**
 * Check if a given object implements the AnswerWithQuestion interface.
 */
export function instanceOfAnswerWithQuestion(value: object): value is AnswerWithQuestion {
    if (!('question' in value) || value['question'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function AnswerWithQuestionFromJSON(json: any): AnswerWithQuestion {
    return AnswerWithQuestionFromJSONTyped(json, false);
}

export function AnswerWithQuestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnswerWithQuestion {
    if (json == null) {
        return json;
    }
    return {
        
        'question': SimpleQuestionFromJSON(json['question']),
        'content': json['content'],
    };
}

export function AnswerWithQuestionToJSON(json: any): AnswerWithQuestion {
    return AnswerWithQuestionToJSONTyped(json, false);
}

export function AnswerWithQuestionToJSONTyped(value?: AnswerWithQuestion | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'question': SimpleQuestionToJSON(value['question']),
        'content': value['content'],
    };
}

