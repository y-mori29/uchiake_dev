/* tslint:disable */
/* eslint-disable */
/**
 * Patient Voice API
 * Patient Voice service API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * The unique identifier of the question
     * @type {number}
     * @memberof Question
     */
    id: number;
    /**
     * The order of the question
     * @type {number}
     * @memberof Question
     */
    order: number;
    /**
     * The question
     * @type {string}
     * @memberof Question
     */
    content: string;
    /**
     * The description of the question
     * @type {string}
     * @memberof Question
     */
    description: string;
    /**
     * The minimum number of characters of the question
     * @type {number}
     * @memberof Question
     */
    minimum: number;
}

/**
 * Check if a given object implements the Question interface.
 */
export function instanceOfQuestion(value: object): value is Question {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('order' in value) || value['order'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('minimum' in value) || value['minimum'] === undefined) return false;
    return true;
}

export function QuestionFromJSON(json: any): Question {
    return QuestionFromJSONTyped(json, false);
}

export function QuestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Question {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'order': json['order'],
        'content': json['content'],
        'description': json['description'],
        'minimum': json['minimum'],
    };
}

export function QuestionToJSON(json: any): Question {
    return QuestionToJSONTyped(json, false);
}

export function QuestionToJSONTyped(value?: Question | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'order': value['order'],
        'content': value['content'],
        'description': value['description'],
        'minimum': value['minimum'],
    };
}

