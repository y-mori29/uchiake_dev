/* tslint:disable */
/* eslint-disable */
/**
 * Patient Voice API
 * Patient Voice service API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SimpleCategory } from './SimpleCategory';
import {
    SimpleCategoryFromJSON,
    SimpleCategoryFromJSONTyped,
    SimpleCategoryToJSON,
    SimpleCategoryToJSONTyped,
} from './SimpleCategory';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
    CommentToJSONTyped,
} from './Comment';
import type { SimpleUser } from './SimpleUser';
import {
    SimpleUserFromJSON,
    SimpleUserFromJSONTyped,
    SimpleUserToJSON,
    SimpleUserToJSONTyped,
} from './SimpleUser';
import type { SubPost } from './SubPost';
import {
    SubPostFromJSON,
    SubPostFromJSONTyped,
    SubPostToJSON,
    SubPostToJSONTyped,
} from './SubPost';
import type { PostFeedback } from './PostFeedback';
import {
    PostFeedbackFromJSON,
    PostFeedbackFromJSONTyped,
    PostFeedbackToJSON,
    PostFeedbackToJSONTyped,
} from './PostFeedback';
import type { AnswerWithQuestion } from './AnswerWithQuestion';
import {
    AnswerWithQuestionFromJSON,
    AnswerWithQuestionFromJSONTyped,
    AnswerWithQuestionToJSON,
    AnswerWithQuestionToJSONTyped,
} from './AnswerWithQuestion';

/**
 * 
 * @export
 * @interface PostDetail
 */
export interface PostDetail {
    /**
     * The unique identifier of the post
     * @type {string}
     * @memberof PostDetail
     */
    id: string;
    /**
     * The user who posted the post
     * @type {SimpleUser}
     * @memberof PostDetail
     */
    user: SimpleUser;
    /**
     * The title of the post
     * @type {string}
     * @memberof PostDetail
     */
    title: string;
    /**
     * The category of the post
     * @type {SimpleCategory}
     * @memberof PostDetail
     */
    category: SimpleCategory;
    /**
     * The answers of the post
     * @type {Array<AnswerWithQuestion>}
     * @memberof PostDetail
     */
    answers: Array<AnswerWithQuestion>;
    /**
     * The content of the post
     * @type {Array<SubPost>}
     * @memberof PostDetail
     */
    subPosts: Array<SubPost>;
    /**
     * The comments of the post
     * @type {Array<Comment>}
     * @memberof PostDetail
     */
    comments: Array<Comment>;
    /**
     * The feedback of the post
     * @type {Array<PostFeedback>}
     * @memberof PostDetail
     */
    feedback: Array<PostFeedback>;
}

/**
 * Check if a given object implements the PostDetail interface.
 */
export function instanceOfPostDetail(value: object): value is PostDetail {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('answers' in value) || value['answers'] === undefined) return false;
    if (!('subPosts' in value) || value['subPosts'] === undefined) return false;
    if (!('comments' in value) || value['comments'] === undefined) return false;
    if (!('feedback' in value) || value['feedback'] === undefined) return false;
    return true;
}

export function PostDetailFromJSON(json: any): PostDetail {
    return PostDetailFromJSONTyped(json, false);
}

export function PostDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'user': SimpleUserFromJSON(json['user']),
        'title': json['title'],
        'category': SimpleCategoryFromJSON(json['category']),
        'answers': ((json['answers'] as Array<any>).map(AnswerWithQuestionFromJSON)),
        'subPosts': ((json['subPosts'] as Array<any>).map(SubPostFromJSON)),
        'comments': ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'feedback': ((json['feedback'] as Array<any>).map(PostFeedbackFromJSON)),
    };
}

export function PostDetailToJSON(json: any): PostDetail {
    return PostDetailToJSONTyped(json, false);
}

export function PostDetailToJSONTyped(value?: PostDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'user': SimpleUserToJSON(value['user']),
        'title': value['title'],
        'category': SimpleCategoryToJSON(value['category']),
        'answers': ((value['answers'] as Array<any>).map(AnswerWithQuestionToJSON)),
        'subPosts': ((value['subPosts'] as Array<any>).map(SubPostToJSON)),
        'comments': ((value['comments'] as Array<any>).map(CommentToJSON)),
        'feedback': ((value['feedback'] as Array<any>).map(PostFeedbackToJSON)),
    };
}

