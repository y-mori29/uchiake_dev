/* tslint:disable */
/* eslint-disable */
/**
 * Patient Voice API
 * Patient Voice service API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetNotificationsResponseDto,
  ReadNotificationDto,
} from '../models/index';
import {
    GetNotificationsResponseDtoFromJSON,
    GetNotificationsResponseDtoToJSON,
    ReadNotificationDtoFromJSON,
    ReadNotificationDtoToJSON,
} from '../models/index';

export interface GetNotificationsRequest {
    timestamp?: string;
    notificationId?: string;
}

export interface MarkNotificationsAsReadRequest {
    readNotificationDto: ReadNotificationDto;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * Get notifications with optional paging
     */
    async getNotificationsRaw(requestParameters: GetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNotificationsResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['notificationId'] != null) {
            queryParameters['notificationId'] = requestParameters['notificationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/iapi/v1/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNotificationsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get notifications with optional paging
     */
    async getNotifications(requestParameters: GetNotificationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNotificationsResponseDto> {
        const response = await this.getNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark notifications as read
     */
    async markNotificationsAsReadRaw(requestParameters: MarkNotificationsAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['readNotificationDto'] == null) {
            throw new runtime.RequiredError(
                'readNotificationDto',
                'Required parameter "readNotificationDto" was null or undefined when calling markNotificationsAsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/iapi/v1/notifications/read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadNotificationDtoToJSON(requestParameters['readNotificationDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mark notifications as read
     */
    async markNotificationsAsRead(requestParameters: MarkNotificationsAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markNotificationsAsReadRaw(requestParameters, initOverrides);
    }

}
